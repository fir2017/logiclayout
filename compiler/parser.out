Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQUALS expression
Rule 2     statement -> expression
Rule 3     expression -> NOT expression
Rule 4     expression -> expression OR expression
Rule 5     expression -> ID OR expression
Rule 6     expression -> expression AND expression
Rule 7     expression -> ID AND expression
Rule 8     expression -> expression XOR expression
Rule 9     expression -> ID XOR expression
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    expression -> LBRACE expression RBRACE
Rule 12    expression -> LBRACKET expression RBRACKET
Rule 13    expression -> BIN
Rule 14    expression -> INT
Rule 15    expression -> TRUE
Rule 16    expression -> FALSE
Rule 17    expression -> ID

Terminals, with rules where they appear

AND                  : 6 7
BIN                  : 13
EQUALS               : 1
FALSE                : 16
ID                   : 1 5 7 9 17
INT                  : 14
LBRACE               : 11
LBRACKET             : 12
LPAREN               : 10
NOT                  : 3
OR                   : 4 5
RBRACE               : 11
RBRACKET             : 12
RPAREN               : 10
TRUE                 : 15
XOR                  : 8 9
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 4 5 6 6 7 8 8 9 10 11 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID EQUALS expression
    (2) statement -> . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    ID              shift and go to state 7
    NOT             shift and go to state 10
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 11
    statement                      shift and go to state 9

state 1

    (13) expression -> BIN .

    RBRACE          reduce using rule 13 (expression -> BIN .)
    OR              reduce using rule 13 (expression -> BIN .)
    AND             reduce using rule 13 (expression -> BIN .)
    XOR             reduce using rule 13 (expression -> BIN .)
    $end            reduce using rule 13 (expression -> BIN .)
    RPAREN          reduce using rule 13 (expression -> BIN .)
    RBRACKET        reduce using rule 13 (expression -> BIN .)


state 2

    (11) expression -> LBRACE . expression RBRACE
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 12

state 3

    (10) expression -> LPAREN . expression RPAREN
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 14

state 4

    (14) expression -> INT .

    RBRACE          reduce using rule 14 (expression -> INT .)
    OR              reduce using rule 14 (expression -> INT .)
    AND             reduce using rule 14 (expression -> INT .)
    XOR             reduce using rule 14 (expression -> INT .)
    $end            reduce using rule 14 (expression -> INT .)
    RPAREN          reduce using rule 14 (expression -> INT .)
    RBRACKET        reduce using rule 14 (expression -> INT .)


state 5

    (15) expression -> TRUE .

    RBRACE          reduce using rule 15 (expression -> TRUE .)
    OR              reduce using rule 15 (expression -> TRUE .)
    AND             reduce using rule 15 (expression -> TRUE .)
    XOR             reduce using rule 15 (expression -> TRUE .)
    $end            reduce using rule 15 (expression -> TRUE .)
    RPAREN          reduce using rule 15 (expression -> TRUE .)
    RBRACKET        reduce using rule 15 (expression -> TRUE .)


state 6

    (16) expression -> FALSE .

    RBRACE          reduce using rule 16 (expression -> FALSE .)
    OR              reduce using rule 16 (expression -> FALSE .)
    AND             reduce using rule 16 (expression -> FALSE .)
    XOR             reduce using rule 16 (expression -> FALSE .)
    $end            reduce using rule 16 (expression -> FALSE .)
    RPAREN          reduce using rule 16 (expression -> FALSE .)
    RBRACKET        reduce using rule 16 (expression -> FALSE .)


state 7

    (1) statement -> ID . EQUALS expression
    (5) expression -> ID . OR expression
    (7) expression -> ID . AND expression
    (9) expression -> ID . XOR expression
    (17) expression -> ID .

    EQUALS          shift and go to state 17
    OR              reduce using rule 17 (expression -> ID .)
    AND             reduce using rule 17 (expression -> ID .)
    XOR             reduce using rule 17 (expression -> ID .)
    $end            reduce using rule 17 (expression -> ID .)

  ! OR              [ shift and go to state 18 ]
  ! AND             [ shift and go to state 15 ]
  ! XOR             [ shift and go to state 16 ]


state 8

    (12) expression -> LBRACKET . expression RBRACKET
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 19

state 9

    (0) S' -> statement .



state 10

    (3) expression -> NOT . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 20

state 11

    (2) statement -> expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    $end            reduce using rule 2 (statement -> expression .)
    OR              shift and go to state 23
    AND             shift and go to state 21
    XOR             shift and go to state 22


state 12

    (11) expression -> LBRACE expression . RBRACE
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          shift and go to state 24
    OR              shift and go to state 23
    AND             shift and go to state 21
    XOR             shift and go to state 22


state 13

    (5) expression -> ID . OR expression
    (7) expression -> ID . AND expression
    (9) expression -> ID . XOR expression
    (17) expression -> ID .

    RBRACE          reduce using rule 17 (expression -> ID .)
    OR              reduce using rule 17 (expression -> ID .)
    AND             reduce using rule 17 (expression -> ID .)
    XOR             reduce using rule 17 (expression -> ID .)
    $end            reduce using rule 17 (expression -> ID .)
    RPAREN          reduce using rule 17 (expression -> ID .)
    RBRACKET        reduce using rule 17 (expression -> ID .)

  ! OR              [ shift and go to state 18 ]
  ! AND             [ shift and go to state 15 ]
  ! XOR             [ shift and go to state 16 ]


state 14

    (10) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RPAREN          shift and go to state 25
    OR              shift and go to state 23
    AND             shift and go to state 21
    XOR             shift and go to state 22


state 15

    (7) expression -> ID AND . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 26

state 16

    (9) expression -> ID XOR . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 27

state 17

    (1) statement -> ID EQUALS . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 28

state 18

    (5) expression -> ID OR . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 29

state 19

    (12) expression -> LBRACKET expression . RBRACKET
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACKET        shift and go to state 30
    OR              shift and go to state 23
    AND             shift and go to state 21
    XOR             shift and go to state 22


state 20

    (3) expression -> NOT expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 3 (expression -> NOT expression .)
    OR              reduce using rule 3 (expression -> NOT expression .)
    AND             reduce using rule 3 (expression -> NOT expression .)
    XOR             reduce using rule 3 (expression -> NOT expression .)
    $end            reduce using rule 3 (expression -> NOT expression .)
    RPAREN          reduce using rule 3 (expression -> NOT expression .)
    RBRACKET        reduce using rule 3 (expression -> NOT expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 21

    (6) expression -> expression AND . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 31

state 22

    (8) expression -> expression XOR . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 32

state 23

    (4) expression -> expression OR . expression
    (3) expression -> . NOT expression
    (4) expression -> . expression OR expression
    (5) expression -> . ID OR expression
    (6) expression -> . expression AND expression
    (7) expression -> . ID AND expression
    (8) expression -> . expression XOR expression
    (9) expression -> . ID XOR expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . LBRACE expression RBRACE
    (12) expression -> . LBRACKET expression RBRACKET
    (13) expression -> . BIN
    (14) expression -> . INT
    (15) expression -> . TRUE
    (16) expression -> . FALSE
    (17) expression -> . ID

    NOT             shift and go to state 10
    ID              shift and go to state 13
    LPAREN          shift and go to state 3
    LBRACE          shift and go to state 2
    LBRACKET        shift and go to state 8
    BIN             shift and go to state 1
    INT             shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6

    expression                     shift and go to state 33

state 24

    (11) expression -> LBRACE expression RBRACE .

    RBRACE          reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    OR              reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    AND             reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    XOR             reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    $end            reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    RPAREN          reduce using rule 11 (expression -> LBRACE expression RBRACE .)
    RBRACKET        reduce using rule 11 (expression -> LBRACE expression RBRACE .)


state 25

    (10) expression -> LPAREN expression RPAREN .

    RBRACE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 10 (expression -> LPAREN expression RPAREN .)


state 26

    (7) expression -> ID AND expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 7 (expression -> ID AND expression .)
    OR              reduce using rule 7 (expression -> ID AND expression .)
    AND             reduce using rule 7 (expression -> ID AND expression .)
    XOR             reduce using rule 7 (expression -> ID AND expression .)
    $end            reduce using rule 7 (expression -> ID AND expression .)
    RPAREN          reduce using rule 7 (expression -> ID AND expression .)
    RBRACKET        reduce using rule 7 (expression -> ID AND expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 27

    (9) expression -> ID XOR expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 9 (expression -> ID XOR expression .)
    OR              reduce using rule 9 (expression -> ID XOR expression .)
    AND             reduce using rule 9 (expression -> ID XOR expression .)
    XOR             reduce using rule 9 (expression -> ID XOR expression .)
    $end            reduce using rule 9 (expression -> ID XOR expression .)
    RPAREN          reduce using rule 9 (expression -> ID XOR expression .)
    RBRACKET        reduce using rule 9 (expression -> ID XOR expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 28

    (1) statement -> ID EQUALS expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    $end            reduce using rule 1 (statement -> ID EQUALS expression .)
    OR              shift and go to state 23
    AND             shift and go to state 21
    XOR             shift and go to state 22


state 29

    (5) expression -> ID OR expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 5 (expression -> ID OR expression .)
    OR              reduce using rule 5 (expression -> ID OR expression .)
    AND             reduce using rule 5 (expression -> ID OR expression .)
    XOR             reduce using rule 5 (expression -> ID OR expression .)
    $end            reduce using rule 5 (expression -> ID OR expression .)
    RPAREN          reduce using rule 5 (expression -> ID OR expression .)
    RBRACKET        reduce using rule 5 (expression -> ID OR expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 30

    (12) expression -> LBRACKET expression RBRACKET .

    RBRACE          reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    XOR             reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 12 (expression -> LBRACKET expression RBRACKET .)


state 31

    (6) expression -> expression AND expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 6 (expression -> expression AND expression .)
    OR              reduce using rule 6 (expression -> expression AND expression .)
    AND             reduce using rule 6 (expression -> expression AND expression .)
    XOR             reduce using rule 6 (expression -> expression AND expression .)
    $end            reduce using rule 6 (expression -> expression AND expression .)
    RPAREN          reduce using rule 6 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 6 (expression -> expression AND expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 32

    (8) expression -> expression XOR expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 8 (expression -> expression XOR expression .)
    OR              reduce using rule 8 (expression -> expression XOR expression .)
    AND             reduce using rule 8 (expression -> expression XOR expression .)
    XOR             reduce using rule 8 (expression -> expression XOR expression .)
    $end            reduce using rule 8 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 8 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 8 (expression -> expression XOR expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]


state 33

    (4) expression -> expression OR expression .
    (4) expression -> expression . OR expression
    (6) expression -> expression . AND expression
    (8) expression -> expression . XOR expression

    RBRACE          reduce using rule 4 (expression -> expression OR expression .)
    OR              reduce using rule 4 (expression -> expression OR expression .)
    AND             reduce using rule 4 (expression -> expression OR expression .)
    XOR             reduce using rule 4 (expression -> expression OR expression .)
    $end            reduce using rule 4 (expression -> expression OR expression .)
    RPAREN          reduce using rule 4 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 4 (expression -> expression OR expression .)

  ! OR              [ shift and go to state 23 ]
  ! AND             [ shift and go to state 21 ]
  ! XOR             [ shift and go to state 22 ]

